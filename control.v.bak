module control(in,balrn_gate,regdest,alusrc,memtoreg,regwrite,memread,memwrite,branch,aluop1,aluop2,jspal_signal,blez_signal,bz_signal,balrn_signal);
input [5:0] in;
input balrn_gate;
input balrn_signal;
output regdest,alusrc,memtoreg,regwrite,memread,memwrite,branch,aluop1,aluop2,jspal_signal,blez_signal,bz_signal;
wire rformat,lw,sw,beq,ori,jspal,blez,bz;
assign rformat= (~|in) && (~balrn_signal) ;
assign lw=in[5]& (~in[4])&(~in[3])&(~in[2])&in[1]&in[0];
assign sw=in[5]& (~in[4])&in[3]&(~in[2])&in[1]&in[0];
assign beq=~in[5]& (~in[4])&(~in[3])&in[2]&(~in[1])&(~in[0]);
assign ori= (~in[5]) & (~in[4]) & in[3] & in[2] & (~in[1]) & in[0];
assign jspal= (~in[5]) & in[4] & (~in[3]) & (~in[2]) & in[1] & in[0];
assign blez= (~in[5]) & (~in[4]) & (~in[3]) & in[2] & in[1] & (~in[0]);
assign bz= (~in[5]) & in[4] & in[3] & (~in[2]) & (~in[1]) & (~in[0]);
assign regdest=rformat | balrn_gate;
assign alusrc=lw|sw|ori|jspal;
assign memtoreg=lw|jspal;
assign regwrite=rformat|lw|ori|balrn_gate;
assign memread=lw|jspal ;
assign memwrite=sw|jspal;
assign branch=beq;
assign aluop1=rformat|ori;
assign aluop2=beq|ori;
assign jspal_signal = jspal;
assign blez_signal = blez;
assign bz_signal = bz;
endmodule
